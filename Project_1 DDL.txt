DROP TABLE IF EXISTS APPLICATION_STATUS_CODES CASCADE;
CREATE TABLE APPLICATION_STATUS_CODES(STATUS_ID INTEGER NOT NULL PRIMARY KEY,STATUS_DESCRIPTION CHAR(60) NOT NULL);

INSERT INTO APPLICATION_STATUS_CODES VALUES(1,'APPLICATION CREATED');
INSERT INTO APPLICATION_STATUS_CODES VALUES(2,'APPLICATION SUBMITTED');
INSERT INTO APPLICATION_STATUS_CODES VALUES(3,'WAITING FOR PENDING DOCUMENTS');
INSERT INTO APPLICATION_STATUS_CODES VALUES(4,'APPLICATION UNDER REVIEW');
INSERT INTO APPLICATION_STATUS_CODES VALUES(5,'DECISION AVAILABLE');


SELECT * FROM  APPLICATION_STATUS_CODES;

DROP TABLE IF EXISTS EDUCATION_LEVELS CASCADE;
CREATE TABLE EDUCATION_LEVELS(EDUCATION_ID INTEGER NOT NULL PRIMARY KEY,EDUCATION_DESCRIPTION VARCHAR(250) NOT NULL);

INSERT INTO EDUCATION_LEVELS VALUES(1,'NO HIGH SCHOOL');
INSERT INTO EDUCATION_LEVELS VALUES(2,'HIGH SCHOOL');
INSERT INTO EDUCATION_LEVELS VALUES(3,'10+2 OR INTERMEDIATE OR PRE-UNIVERSITY');
INSERT INTO EDUCATION_LEVELS VALUES(4,'BACHELORS DEGREE - 3 YEARS');
INSERT INTO EDUCATION_LEVELS VALUES(5,'BACHELORS DEGREE - 4 YEARS');
INSERT INTO EDUCATION_LEVELS VALUES(6,'MASTERS DEGREE');
INSERT INTO EDUCATION_LEVELS VALUES(7,'Ph. D');
INSERT INTO EDUCATION_LEVELS VALUES(8,'Post Doctorate');

SELECT * FROM EDUCATION_LEVELS;

/*DROP TABLE IF EXISTS COUNTRIES CASCADE;
 
CREATE TABLE COUNTRIES(COUNTRY_ID SERIAL NOT NULL PRIMARY KEY,
COUNTRY_CODE CHAR(10) NOT NULL,
COUNTRY_NAME VARCHAR(254) NOT NULL,
CURRENCY_CODE CHAR(10) NOT NULL,
CURRENCY_NAME VARCHAR(254) NOT NULL
);
*/

/*Copy the currency_codes.csv file to a know location. 
I copied the file to the location "C:\Users\Sekhar\Documents\CUNY\607 Assignments\" 
in a windows machine, and changed the file permissions to share the file with EVERYONE.

If you are using Linux, use the command chmod 777 <file_name>

*/

/*COPY COUNTRIES (COUNTRY_NAME, COUNTRY_CODE, CURRENCY_NAME,CURRENCY_CODE) 
FROM 'C:\Users\Sekhar\Documents\CUNY\607 Assignments\CURRENCY_CODES.CSV' DELIMITER ',' CSV HEADER;
*/

/*SELECT * FROM COUNTRIES where country_code = 'IN';*/

DROP TABLE IF EXISTS INCOME_CODES CASCADE;

CREATE TABLE INCOME_CODES(INCOME_ID INTEGER NOT NULL PRIMARY KEY,
INCOME_CLASS CHAR(60) NOT NULL);

INSERT INTO INCOME_CODES VALUES(1,'HIGH INCOME');
INSERT INTO INCOME_CODES VALUES(2,'UPPER MIDDLE');
INSERT INTO INCOME_CODES VALUES(3,'LOWER MIDDLE');
INSERT INTO INCOME_CODES VALUES(4,'LOW');

SELECT * FROM INCOME_CODES;

DROP TABLE IF EXISTS COUNTRY_INCOME_CLASSIFICATION CASCADE;

CREATE TABLE COUNTRY_INCOME_CLASSIFICATION(COUNTRY_ID SERIAL PRIMARY KEY, COUNTRY_CODE CHAR(10) NOT NULL,
COUNTRY_NAME VARCHAR(254) NOT NULL, INCOME_ID INTEGER NOT NULL,
CONSTRAINT INCOME_ID_FK FOREIGN KEY(INCOME_ID) REFERENCES INCOME_CODES(INCOME_ID)
);

COPY COUNTRY_INCOME_CLASSIFICATION (COUNTRY_NAME,COUNTRY_CODE,  INCOME_ID) 
FROM 'C:\Users\Sekhar\Documents\CUNY\607 Assignments\income_levels.CSV' DELIMITER ',' CSV HEADER;

SELECT * FROM COUNTRY_INCOME_CLASSIFICATION A, INCOME_CODES B WHERE A.INCOME_ID = B.INCOME_ID;

DROP TABLE IF EXISTS IN_STATE_FEE_CODES CASCADE;

CREATE TABLE IN_STATE_FEE_CODES
(
FEE_ID INTEGER NOT NULL PRIMARY KEY,
CREDIT_HOUR_FEE DECIMAL(30,2) NOT NULL
);

INSERT INTO IN_STATE_FEE_CODES VALUES(1,450.00);

DROP TABLE IF EXISTS OUT_STATE_FEE_CODES CASCADE;

CREATE TABLE OUT_STATE_FEE_CODES
(
FEE_ID INTEGER NOT NULL PRIMARY KEY,
CREDIT_HOUR_FEE DECIMAL(30,2) NOT NULL
);

INSERT INTO OUT_STATE_FEE_CODES VALUES(1,850.00);

DROP TABLE IF EXISTS DEGREE_LEVEL CASCADE;

CREATE TABLE DEGREE_LEVEL(LEVEL INTEGER NOT NULL PRIMARY KEY,LEVEL_NAME CHAR(50) NOT NULL);
INSERT INTO DEGREE_LEVEL VALUES(1,'BACHELOR DEGREE');
INSERT INTO DEGREE_LEVEL VALUES(2,'MASTERS DEGREE');
INSERT INTO DEGREE_LEVEL VALUES(3,'Ph.D');
INSERT INTO DEGREE_LEVEL VALUES(4,'Post Doc.');

SELECT * FROM DEGREE_LEVEL;

DROP TABLE IF EXISTS DEGREES_OFFERED CASCADE;

CREATE TABLE DEGREES_OFFERED
(
 DEGREE_ID INTEGER NOT NULL PRIMARY KEY,
 CREDIT_HOURS INTEGER NOT NULL,
 IN_STATE_FEE_ID INTEGER NOT NULL REFERENCES IN_STATE_FEE_CODES(FEE_ID),
 OUT_STATE_FEE_CODES INTEGER NOT NULL REFERENCES OUT_STATE_FEE_CODES(FEE_ID),
 AVAILABLE_ONLINE CHAR(1) NOT NULL CONSTRAINT CHK_1 CHECK(AVAILABLE_ONLINE IN ('Y','N')),
 AVAILABLE_CLASS_ROOM CHAR(1) NOT NULL CONSTRAINT CHK_2 CHECK(AVAILABLE_CLASS_ROOM IN ('Y','N')),
 DEGREE_NAME CHAR(100) NOT NULL,
 DEGREE_LEVEL INTEGER NOT NULL REFERENCES DEGREE_LEVEL(LEVEL)
);

INSERT INTO DEGREES_OFFERED VALUES
(
1,60,1,1,'Y','Y','Business Administration',1);


INSERT INTO DEGREES_OFFERED VALUES
(
2,40,1,1,'Y','Y','Business Administration',2);


INSERT INTO DEGREES_OFFERED VALUES
(
3,36,1,1,'Y','N','Data Analytics',2);

select * from DEGREES_OFFERED;

DROP TABLE IF EXISTS DEGREE_PRE_REQUISITES CASCADE;

CREATE TABLE DEGREE_PRE_REQUISITES
(
DEGREE_ID INTEGER NOT NULL,
EDUCATION_ID INTEGER NOT NULL,
CONSTRAINT DEGREE_PRE_REQ_PK PRIMARY KEY(DEGREE_ID,EDUCATION_ID),
CONSTRAINT DEGREE_PRE_REQ_FK1 FOREIGN KEY(DEGREE_ID) REFERENCES DEGREES_OFFERED,
CONSTRAINT DEGREE_PRE_REQ_FK2 FOREIGN KEY(EDUCATION_ID) REFERENCES EDUCATION_LEVELS
);

INSERT INTO DEGREE_PRE_REQUISITES
VALUES
(
  1,3
);

INSERT INTO DEGREE_PRE_REQUISITES
VALUES
(
  2,5
);


INSERT INTO DEGREE_PRE_REQUISITES
VALUES
(
  2,4
);



INSERT INTO DEGREE_PRE_REQUISITES
VALUES
(
  3,5
);

SELECT * FROM DEGREE_PRE_REQUISITES;
SELECT A.DEGREE_NAME, D.LEVEL_NAME,B.EDUCATION_DESCRIPTION ENROLLMENT_PRE_REQ FROM DEGREES_OFFERED A,
EDUCATION_LEVELS B, DEGREE_PRE_REQUISITES C, DEGREE_LEVEL D
WHERE A.DEGREE_ID =  C.DEGREE_ID AND B.EDUCATION_ID = C.EDUCATION_ID AND D.LEVEL = A.DEGREE_LEVEL;

DROP TABLE IF EXISTS STUDENT_PROFILE CASCADE;

CREATE TABLE STUDENT_PROFILE
(

  STUDENT_ID SERIAL NOT NULL PRIMARY KEY,
  FIRST_NAME CHAR(60) NOT NULL,
  MIDDLE_INITIAL CHAR(1) NULL,
  LAST_NAME CHAR(60) NOT NULL,
  ADDRESS_LINE_1 CHAR(120) NOT NULL,
  ADDRESS_LINE_2 CHAR(120) NULL,
  CITY CHAR(60) NOT NULL,
  STATE CHAR(60) NULL,
  COUNTRY CHAR(100) NOT NULL,
  ZIP CHAR(10) NOT NULL,
  EMAIL CHAR(120) NOT NULL,
  PHONE CHAR(60) NULL,
  GENDER CHAR(1) NULL,
  HIGHEST_EDUCATION INTEGER NOT NULL,
  COUNTRY_OF_CITIZENSHIP INTEGER NOT NULL,
  CREATE_TIMESTAMP TIMESTAMP NOT NULL,
  UPDATE_TIMESPAMT TIMESTAMP NOT NULL,
  CONSTRAINT STUDENT_FK_1 FOREIGN KEY(HIGHEST_EDUCATION) REFERENCES EDUCATION_LEVELS ON DELETE RESTRICT,
  CONSTRAINT STUDENT_FK_2 FOREIGN KEY(COUNTRY_OF_CITIZENSHIP) REFERENCES COUNTRY_INCOME_CLASSIFICATION ON DELETE RESTRICT
  );

  INSERT INTO STUDENT_PROFILE VALUES
  (
  1,'SAMUEL',NULL,'ALEX','34 SOMERSET ROAD',NULL,'OMAHA','NE', 'USA','61229', 'XYZ@DUMMY.COM',NULL,'M',3,99,current_timestamp,current_timestamp);

  INSERT INTO STUDENT_PROFILE VALUES
  (
  2,'NIKITA',NULL,'YURI','122 ROSEWOOD DR',NULL,'HOLLYWOOD','CA', 'USA','91224', 'ABC@DUMMY.COM',NULL,'M',5,154,current_timestamp,current_timestamp);

  INSERT INTO STUDENT_PROFILE VALUES
  (
  3, 'AMIT',NULL,'SAXENA','129 WATERFRONT PL',NULL,'JERSEY CITY','NJ', 'USA','08123', '123@DUMMY.COM',NULL,'M',5,87,current_timestamp,current_timestamp);

INSERT INTO STUDENT_PROFILE VALUES
  (
  4, 'JEFF',NULL,'SHIAU','XEN AV',NULL,'SHANGHAI','EA', 'CHINA','XRRR', '123@DUMMY.COM',NULL,'M',3,41,current_timestamp,current_timestamp);

DROP TABLE IF EXISTS STUDENT_APPLICATION CASCADE;

CREATE TABLE STUDENT_APPLICATION
(
STUDENT_ID INTEGER NOT NULL,
DEGREE_ID INTEGER NOT NULL,
STATUS_ID INTEGER NOT NULL,
CREATE_TIMESTAMP TIMESTAMP NOT NULL,
UPDATE_TIMESTAMP TIMESTAMP NOT NULL,
CONSTRAINT STUDENT_APP_PK PRIMARY KEY(STUDENT_ID,DEGREE_ID),
CONSTRAINT STUDENT_APP_FK_1 FOREIGN KEY(DEGREE_ID) REFERENCES DEGREES_OFFERED ON DELETE RESTRICT,
CONSTRAINT STUDENT_APP_FK_2 FOREIGN KEY(STATUS_ID) REFERENCES APPLICATION_STATUS_CODES ON DELETE RESTRICT,
CONSTRAINT STUDENT_APP_FK_3 FOREIGN KEY(STUDENT_ID) REFERENCES STUDENT_PROFILE ON DELETE CASCADE,
CONSTRAINT STUDENT_APP_FK_4 FOREIGN KEY(DEGREE_ID) REFERENCES DEGREES_OFFERED ON DELETE RESTRICT
);

INSERT INTO STUDENT_APPLICATION
VALUES 
(
1,1,1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP
);

INSERT INTO STUDENT_APPLICATION
VALUES 
(
2,3,2,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP
);


INSERT INTO STUDENT_APPLICATION
VALUES 
(
2,2,1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP
);

INSERT INTO STUDENT_APPLICATION
VALUES 
(
3,2,4,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP
);


INSERT INTO STUDENT_APPLICATION
VALUES 
(
4,1,5,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP
);



/*To find students who qualify for subsidized fee*/
SELECT A.FIRST_NAME, A.LAST_NAME, B.COUNTRY_NAME AS COUNTRY_OF_CITIZENSHIP, A.COUNTRY AS CURRENT_COUNTRY, C.INCOME_CLASS, CASE WHEN C.INCOME_CLASS = 'LOW' THEN 'YES' ELSE 'NO'
END AS QUALIFIES_FOR_SUBSIDY
FROM STUDENT_PROFILE A, COUNTRY_INCOME_CLASSIFICATION B, INCOME_CODES C
WHERE A.COUNTRY_OF_CITIZENSHIP = B.COUNTRY_ID AND
C.INCOME_ID = B.INCOME_ID;

/*To find degrees offered, degree level and enrollment requisites*/
SELECT * FROM DEGREE_PRE_REQUISITES;
SELECT A.DEGREE_NAME, D.LEVEL_NAME,B.EDUCATION_DESCRIPTION ENROLLMENT_PRE_REQ FROM DEGREES_OFFERED A,
EDUCATION_LEVELS B, DEGREE_PRE_REQUISITES C, DEGREE_LEVEL D
WHERE A.DEGREE_ID =  C.DEGREE_ID AND B.EDUCATION_ID = C.EDUCATION_ID AND D.LEVEL = A.DEGREE_LEVEL;

